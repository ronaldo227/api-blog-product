# Arquitetura da API: api-blog-product

Este diagrama representa a arquitetura real da API `api-blog-product`.

- **Stack:** Node.js, TypeScript, Express, Prisma ORM, PostgreSQL
- **Camadas:**
  - Middlewares (segurança, autenticação, logging, validação)
  - Rotas (agrupamento por domínio)
  - Controllers (validação, orquestração)
  - Services (lógica de negócio, acesso ao banco)
  - Prisma Client (ORM)
  - Banco de Dados PostgreSQL

---

```mermaid
flowchart TD
    subgraph Cliente
        A[Usuário/Cliente HTTP]
    end
    subgraph API [API Blog Product]
        B[Middlewares\n(Helmet, CORS, JWT, Rate Limit, etc)]
        C[Rotas Express]
        D[Controllers]
        E[Services]
        F[Prisma Client]
    end
    subgraph BancoDeDados
        G[(PostgreSQL)]
    end
    subgraph Externos
        H[Redis (Cache)]
        I[Fila (RabbitMQ/Outros)]
        J[API Externa]
    end
    A --> B
    B --> C
    C --> D
    D --> E
    E --> F
    F --> G
    E -- cache/read/write --> H
    E -- envia/consome --> I
    E -- integra --> J
```

> **Observação:** Para visualizar o diagrama, instale uma extensão de preview Mermaid no VS Code.

Se precisar adicionar dependências (ex: cache Redis, fila, API externa), me informe para atualizar o diagrama.
